server:
  port: 8080

logging:
  level:
    root: INFO
    org.springframework.web: info
    org.springframework.security: debug
#    org.springframework.boot.autoconfigure: DEBUG



#spring:
#  security:
#    oauth2:
#      resourceserver:
#        jwt:
#          jwk-set-uri: ${mockwebserver.url}/.well-known/jwks.json
spring:
  thymeleaf:
    cache: false
  security:
    browser:
      login:
        login-page: /login
    oauth2:
      client:
        registration:
          google:
            client-id: your-app-client-id
            client-secret: your-app-client-secret
          github:
            client-id: 9ff4b8589e5765cc2ceb
            client-secret: c3ad02a14cf6634f9a1ec40b24b4b58186137bc2
          facebook:
            client-id: your-app-client-id
            client-secret: your-app-client-secret
          okta:
            client-id: your-app-client-id
            client-secret: your-app-client-secret
          qq:
            client-id: 101896709
            client-secret: e95f0137c272cf36f4ec59859cde26c8
            scope: get_user_info
            authorization-grant-type: authorization_code
            redirect-uri: '{baseUrl}/login/oauth2/code/{registrationId}'
            provider: qq
            client-name: qq
            client-authentication-method: basic
        provider:
          okta:
            authorization-uri: https://your-subdomain.oktapreview.com/oauth2/v1/authorize
            token-uri: https://your-subdomain.oktapreview.com/oauth2/v1/token
            user-info-uri: https://your-subdomain.oktapreview.com/oauth2/v1/userinfo
            jwk-set-uri: https://your-subdomain.oktapreview.com/oauth2/v1/keys
          qq:
            authorization-uri: https://graph.qq.com/oauth2.0/authorize
            token-uri: https://graph.qq.com/oauth2.0/token
            user-info-uri: https://graph.qq.com/oauth2.0/me
            user-name-attribute: openid